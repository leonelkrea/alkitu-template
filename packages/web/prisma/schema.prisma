// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

// Enums
enum UserRole {
  ADMIN
  EMPLOYEE
  CLIENT
  LEAD
  USER
  MODERATOR
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  ANONYMIZED
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime
}

enum ResourceType {
  USER
  ADMIN_PANEL
  OTHER
}

enum AccessLevel {
  READ
  WRITE
  ADMIN
}

// User Management
model User {
  id                      String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?                 @default("")
  lastName                String?                 @default("")
  email                   String                  @unique
  emailVerified           DateTime?
  image                   String?                 @default("")
  password                String?
  contactNumber           String?                 @default("")
  role                    UserRole                @default(CLIENT)
  status                  UserStatus              @default(ACTIVE)
  terms                   Boolean                 @default(false)
  isTwoFactorEnabled      Boolean                 @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  accounts                Account[]
  notifications           Notification[]
  notificationPreferences NotificationPreference?
  billings                Billing[]
  groupIds                String[]                @db.ObjectId
  groups                  Group[]                 @relation(fields: [groupIds], references: [id])
  tagIds                  String[]                @db.ObjectId
  tags                    Tag[]                   @relation(fields: [tagIds], references: [id])
  resourceIds             String[]                @db.ObjectId
  resources               Resource[]              @relation(fields: [resourceIds], references: [id])
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  lastLogin               DateTime?               @default(now())
  refreshTokens           RefreshToken[]
  sentMessages            ChatMessage[]           @relation("SenderMessages")
  assignedConversations   Conversation[]          @relation("AssignedConversations")

  // Company Relations
  companyMemberships CompanyMember[]
  
  // Personal tweakcn relations (only user-specific actions)
  authoredPresets ThemePreset[]     @relation("AuthoredPresets")
}

// Notification Preferences model
model NotificationPreference {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Email notifications
  emailEnabled Boolean  @default(true)
  emailTypes   String[] @default(["welcome", "security", "system"]) // Types of notifications to receive via email

  // Push notifications
  pushEnabled Boolean  @default(true)
  pushTypes   String[] @default(["urgent", "mentions", "system"]) // Types for push notifications

  // In-app notifications  
  inAppEnabled Boolean  @default(true)
  inAppTypes   String[] @default(["all"]) // Types for in-app notifications

  // Frequency settings
  emailFrequency String  @default("immediate") // immediate, hourly, daily, weekly
  digestEnabled  Boolean @default(false) // Enable email digest

  // Quiet hours
  quietHoursEnabled Boolean @default(false)
  quietHoursStart   String? // Time format "HH:mm" 
  quietHoursEnd     String? // Time format "HH:mm"

  // Marketing and promotional
  marketingEnabled   Boolean @default(false)
  promotionalEnabled Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notification_preferences")
}

// Notification model
model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  type      String?  @default("info")
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// Billing model
model Billing {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan          String
  status        String
  amount        Float
  currency      String
  startDate     DateTime
  endDate       DateTime?
  paymentMethod String?
  transactionId String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

// Authentication Models
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

// User Group Management
model Group {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  color       String?  @default("#3B82F6")
  userIds     String[] @db.ObjectId
  users       User[]   @relation(fields: [userIds], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// User Tag Management 
model Tag {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  color       String?  @default("#10B981")
  userIds     String[] @db.ObjectId
  users       User[]   @relation(fields: [userIds], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Resource Management
model Resource {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  resourceType   ResourceType
  userIds        String[]        @db.ObjectId
  users          User[]          @relation(fields: [userIds], references: [id])
  accessControls AccessControl[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

// Access Control
model AccessControl {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  resourceId  String       @db.ObjectId
  resource    Resource     @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  name        String
  description String?
  isActive    Boolean      @default(true)
  accessRules AccessRule[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([resourceId])
}

model AccessRule {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  accessControlId String        @db.ObjectId
  accessControl   AccessControl @relation(fields: [accessControlId], references: [id], onDelete: Cascade)

  subjectType  String // USER, ROLE
  subjectValue String // email, role name
  accessLevel  AccessLevel

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accessControlId])
  @@index([subjectType, subjectValue])
}

model Conversation {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  contactInfoId String             @db.ObjectId
  assignedToId  String?            @db.ObjectId
  status        ConversationStatus @default(OPEN)
  priority      Priority           @default(NORMAL)
  source        String             @default("website")
  tags          String[]
  internalNotes String?
  lastMessageAt DateTime           @default(now())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  // Relations
  contactInfo ContactInfo   @relation(fields: [contactInfoId], references: [id])
  assignedTo  User?         @relation("AssignedConversations", fields: [assignedToId], references: [id])
  messages    ChatMessage[]

  @@map("conversations")
}

model ChatMessage {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  content        String
  isFromVisitor  Boolean  @default(true)
  senderUserId   String?  @db.ObjectId
  isRead         Boolean  @default(false)
  metadata       Json? // Additional message data
  createdAt      DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderUser   User?        @relation("SenderMessages", fields: [senderUserId], references: [id])

  @@map("chat_messages")
}

model ContactInfo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String?  @unique
  phone     String?  @unique
  name      String?
  company   String?
  source    String? // UTM source, referrer
  ipAddress String?
  userAgent String?
  metadata  Json? // Additional contact data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  conversations Conversation[]

  @@map("contact_info")
}

enum ConversationStatus {
  OPEN
  IN_PROGRESS
  WAITING_CUSTOMER
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model ChatbotConfig {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  // Appearance
  primaryColor         String   @default("#007ee6")
  textColor            String   @default("#FFFFFF")
  backgroundColor      String   @default("#222222")
  borderRadius         Int      @default(8)
  position             String   @default("bottom-right") // "bottom-right" | "bottom-left"
  // Behavior
  autoOpen             Boolean  @default(false)
  autoOpenDelay        Int      @default(5000) // milliseconds
  offlineMode          Boolean  @default(false)
  // Contact Form Fields
  requireEmail         Boolean  @default(true)
  requirePhone         Boolean  @default(false)
  requireName          Boolean  @default(true)
  requireCompany       Boolean  @default(false)
  allowAnonymous       Boolean  @default(false)
  // Messages
  welcomeMessage       String   @default("Hi there! How can we help you today?")
  offlineMessage       String   @default("We are currently offline. Please leave a message and we'll get back to you.")
  thankYouMessage      String   @default("Thank you for your message! We'll get back to you shortly.")
  // Business Hours
  businessHoursEnabled Boolean  @default(false)
  timezone             String? // e.g., "America/New_York"
  schedule             Json? // Store weekly schedule as JSON
  // Anti-spam
  rateLimitMessages    Int      @default(5)
  rateLimitWindow      Int      @default(60) // seconds
  blockSpamKeywords    String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chatbot_configs")
}

// =============================================================================
// COMPANY MANAGEMENT MODELS
// =============================================================================

model Company {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  description String?
  industry    String?
  website     String?
  logoUrl     String?
  
  // Company settings
  isActive    Boolean  @default(true)
  maxMembers  Int      @default(10)
  
  // Relations
  members     CompanyMember[]
  themes      Theme[]         @relation("CompanyThemes")
  
  // tweakcn Integration Relations (Company-level)
  themeRules      ThemeRule[]       @relation("CompanyThemeRules")
  aiUsage         AIUsage[]         @relation("CompanyAIUsage")
  subscription    CompanySubscription? @relation("CompanySubscription")
  applicationBrandings ApplicationBranding[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("companies")
}

model CompanyMember {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  companyId String      @db.ObjectId
  userId    String      @db.ObjectId
  role      CompanyRole @default(MEMBER)
  
  // Permissions
  canEditThemes   Boolean @default(false)
  canInviteUsers  Boolean @default(false)
  canManageRoles  Boolean @default(false)
  
  // Relations
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  invitedAt DateTime?
  joinedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([companyId, userId])
  @@map("company_members")
}

// =============================================================================
// TWEAKCN INTEGRATION MODELS - Design System Theme Management
// =============================================================================

// Enums for tweakcn theme system
enum ThemeScope {
  GLOBAL // Affects entire application
  COMPONENT // Affects all instances of component type  
  CONTEXTUAL // Affects component in specific context
  INSTANCE // Affects specific component instance
}

enum ComponentLevel {
  ATOM
  MOLECULE
  ORGANISM
  TEMPLATE
}

enum LogoType {
  TEXT
  SVG
  IMAGE
}

model ApplicationBranding {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  organizationId  String?  @db.ObjectId // Multi-tenant support
  
  // Logo Configuration
  logoType        LogoType @default(TEXT) // TEXT, SVG, IMAGE
  logoText        String?
  logoSvg         String?
  logoImageUrl    String?
  logoScale       Float    @default(1.0)
  logoPosition    String   @default("left")
  
  // Color Theme
  primaryColor    String   @default("#007ee6")
  secondaryColor  String   @default("#6B7280")
  accentColor     String?
  backgroundColor String   @default("#FFFFFF")
  textColor       String   @default("#1F2937")
  
  // Advanced Theming
  fontFamily      String?
  customCSS       String?
  
  // Meta
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  organization    Company? @relation(fields: [organizationId], references: [id])
  
  @@map("application_branding")
}

model SystemTheme {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String   @unique // "light", "dark", "custom"
  
  // Color Palette
  colors          Json     // Complete color token system
  typography      Json     // Typography scale
  spacing         Json     // Spacing tokens
  shadows         Json     // Shadow tokens
  animations      Json     // Animation tokens
  
  // Meta
  isDefault       Boolean  @default(false)
  isSystem        Boolean  @default(true) // System themes vs user themes
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("system_themes")
}

// Theme Rules - Core table for tweakcn integration
model ThemeRule {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  companyId String  @db.ObjectId
  company   Company @relation("CompanyThemeRules", fields: [companyId], references: [id], onDelete: Cascade)
  
  // User who created/modified the rule
  createdById      String  @db.ObjectId
  lastModifiedById String? @db.ObjectId

  // Theme identification
  name        String // "Primary Brand Theme", "Button Customization"
  description String? // Optional description

  // tweakcn theme data (adapted from Drizzle schema)
  styles Json // ThemeStyles type { light: {...}, dark: {...} }

  // Alkitu specificity system (NEW)
  scope          ThemeScope // global | component | contextual | instance
  componentType  String? // 'button' | 'badge' | 'input' | etc.
  componentLevel ComponentLevel? // atom | molecule | organism | template
  contextPath    String[] // ['card', 'form'] for nested contexts
  instanceId     String? // Specific component instance ID

  // Computed specificity value (for CSS-like precedence)
  specificity Int // 1=global, 10=component, 100=contextual, 1000=instance

  // Rule metadata
  isActive  Boolean @default(true)
  isBuiltIn Boolean @default(false) // System presets vs user-created
  version   Int     @default(1) // For versioning theme changes

  // Inheritance (rules can inherit from other rules)
  parentRuleId String?     @db.ObjectId
  parentRule   ThemeRule?  @relation("RuleInheritance", fields: [parentRuleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childRules   ThemeRule[] @relation("RuleInheritance")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId, scope])
  @@index([componentType, scope])
  @@index([specificity])
  @@index([createdById])
  @@map("theme_rules")
}

// AI Usage Tracking - Adapted from tweakcn's ai_usage table
model AIUsage {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  companyId String  @db.ObjectId
  company   Company @relation("CompanyAIUsage", fields: [companyId], references: [id], onDelete: Cascade)
  
  // User who made the AI request
  requestedById String @db.ObjectId

  // AI model and usage
  modelId          String // 'gemini-1.5-pro', 'gpt-4-turbo', etc.
  promptTokens     Int    @default(0)
  completionTokens Int    @default(0)

  // Usage tracking
  daysSinceEpoch Int // Days since Unix epoch for daily aggregation
  operationType  String // 'theme-generation', 'chat', 'enhancement'

  // Request context
  requestData  Json? // Store prompt/context data
  responseData Json? // Store generated theme data

  // Cost tracking
  estimatedCost Float? // In USD cents

  createdAt DateTime @default(now())

  @@index([companyId, daysSinceEpoch])
  @@index([requestedById])
  @@index([modelId])
  @@map("ai_usage")
}

// Company Subscription - Adapted from tweakcn's subscription table
model CompanySubscription {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  companyId String  @unique @db.ObjectId
  company   Company @relation("CompanySubscription", fields: [companyId], references: [id], onDelete: Cascade)

  // Subscription details
  status String // 'active' | 'canceled' | 'past_due' | 'trialing'
  plan   String // 'free' | 'pro' | 'team' | 'enterprise'

  // Billing cycle
  amount            Int // Amount in cents
  currency          String @default("USD")
  recurringInterval String // 'month' | 'year'

  // Period tracking
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean   @default(false)
  canceledAt         DateTime?

  // Usage limits
  aiRequestsUsed  Int @default(0)
  aiRequestsLimit Int @default(10) // Free tier limit
  themeRulesUsed  Int @default(0)
  themeRulesLimit Int @default(50) // Free tier limit

  // Payment provider data
  providerId     String? // Stripe customer ID, etc.
  subscriptionId String? // External subscription ID

  // Metadata
  metadata Json? // Store additional subscription data

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("company_subscriptions")
}

// Theme Presets - Built-in themes (like tweakcn's built-in themes)
model ThemePreset {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Preset identification
  name        String   @unique // "Corporate Blue", "Startup Green"
  description String?
  category    String? // "corporate", "creative", "minimal", "dark"
  tags        String[] // ["professional", "blue", "modern"]

  // Preview data
  previewImage String? // URL to preview image
  colorPalette String[] // Main colors for quick preview

  // Theme data (same format as ThemeRule)
  styles Json // ThemeStyles type { light: {...}, dark: {...} }

  // Metadata
  isPublic Boolean @default(true)
  authorId String? @db.ObjectId // If user-created
  author   User?   @relation("AuthoredPresets", fields: [authorId], references: [id])

  // Usage stats
  usageCount Int    @default(0) // How many times applied
  rating     Float? // Average user rating

  version   String   @default("1.0.0")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([isPublic])
  @@map("theme_presets")
}

model Theme {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  companyId       String   @db.ObjectId
  company         Company  @relation("CompanyThemes", fields: [companyId], references: [id], onDelete: Cascade)
  
  // Theme configuration
  lightModeConfig Json     @default("{}")
  darkModeConfig  Json     @default("{}")
  
  // Metadata
  isActive        Boolean  @default(true)
  isDefault       Boolean  @default(false)
  version         String   @default("1.0.0")
  
  // Audit fields
  createdById     String?  @db.ObjectId
  lastModifiedById String? @db.ObjectId
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([companyId, name])
  @@map("themes")
}
